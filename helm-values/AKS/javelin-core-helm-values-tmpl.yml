fullnameOverride: "javelin-core"

livenessProbe:
  httpGet:
    path: /v1/system/healthz
    port: 8000
  initialDelaySeconds: 15
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 2

readinessProbe:
  httpGet:
    path: /v1/system/healthz
    port: 8000
  initialDelaySeconds: 15
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 2

nodeSelector:
  kube/nodegroup: "general"

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 4
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

podDisruptionBudget:
  enabled: true
  minAvailable: 1

service:
  type: ClusterIP
  protocol: TCP
  port: 8000

image:
  repository: "${DOCKER_IMAGE}"
  pullPolicy: Always
  tag: ${IMAGE_TAG}

imagePullSecrets:
  - name: javelin-registry-secret

resources:
  requests:
    memory: 512Mi
    cpu: 200m
  limits:
    memory: 1024Mi
    cpu: 500m

secrets:
  enabled: true
  secretData:
    # Please refer https://github.com/getjavelin/javelin-iac/blob/main/docs/service-vars.md

volumes:
  - name: secret-volume
    secret:
      secretName: javelin-core-file
      optional: false
  # - name: redis-cert-volume
  #   secret:
  #     secretName: javelin-core-redis-cert
  #     optional: false

volumeMounts:
  - name: secret-volume
    mountPath: "/app/config/javelin-gcpjson.json"
    readOnly: true
    subPath: javelin-gcpjson.json
  # - name: redis-cert-volume
  #   mountPath: "/app/certs/redis-ca.pem"
  #   readOnly: true
  #   subPath: redis-ca.pem

serviceAccount:
  create: true
  automount: true
  # annotations:
  #   azure.workload.identity/client-id: "${SVC_IAM_CLIENT_ID}"
  rules:
    - apiGroups: [ "" ]
      resources: [ "secrets" ]
      verbs: [ "get", "list" ]

ingress:
  enabled: true
  className: "azure-application-gateway"
  annotations:
    appgw.ingress.kubernetes.io/use-private-ip: "false"
    appgw.ingress.kubernetes.io/ssl-redirect: "true"
    # appgw.ingress.kubernetes.io/appgw-ssl-certificate: "self-signed"
    cert-manager.io/cluster-issuer: letsencrypt-prod
    appgw.ingress.kubernetes.io/backend-protocol: "http"
    appgw.ingress.kubernetes.io/request-timeout: "300"
    appgw.ingress.kubernetes.io/health-probe-path: "/v1/system/healthz"
    appgw.ingress.kubernetes.io/health-probe-status-codes: "200"
    appgw.ingress.kubernetes.io/health-probe-interval: "15"
    appgw.ingress.kubernetes.io/health-probe-timeout: "5"
    appgw.ingress.kubernetes.io/health-probe-unhealthy-threshold: "2"
  tls:
    - hosts:
        - api-staging.example.com
      secretName: javelin-core-tls
  hosts:
    - host: api-staging.example.com
      paths:
        - path: /v1/
          pathType: Prefix